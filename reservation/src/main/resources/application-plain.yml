server:
  port: 8083

# Spring specific configuration
spring:
  application:
    name: reservation
  cloud:
    config:
      enabled: false
    discovery:
      enabled: true
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: org.sergei.processing
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# Authentication security details
security:
  exchange: # This one needs for data exchange between services
    auth-server: http://localhost:8080/auth/oauth/token
    client-id: system-client
    client-secret: uCvtFPbxBEmVho9X
    user: system_user
    password: FjtdJSaqGlZhVAR8

# Feign client properties
feign:
  route-url: http://localhost:8088/

# DataSource configuration
datasource:
  jdbc-url: jdbc:postgresql://localhost:5432/flight_reservation
  type: com.zaxxer.hikari.HikariDataSource
  username: flight
  password: flight

management:
  endpoints.web.exposure.include: "info, health, metrics, configprops, env, prometheus"

logging:
  file: C:/tmp/reservation.log
  level:
    ROOT: INFO
    org:
      sergei:
        reservation: DEBUG